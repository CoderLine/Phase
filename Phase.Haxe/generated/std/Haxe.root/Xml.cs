//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a the Phase Extern Generator
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Phase;
using Phase.Attributes;
namespace Haxe.root
{
    [External]
    [Name("Xml")]
    public partial class Xml
    {
        [Name("nodeType")]
        public virtual extern Haxe.root.XmlType NodeType { get; private set; }
        [Name("nodeName")]
        public virtual extern Haxe.HaxeString NodeName { get; set; }
        [Name("nodeValue")]
        public virtual extern Haxe.HaxeString NodeValue { get; set; }
        [Name("parent")]
        public virtual extern Haxe.root.Xml Parent { get; private set; }
        [Name("children")]
        protected virtual extern Haxe.HaxeArray<Haxe.root.Xml> Children { get; set; }
        [Name("attributeMap")]
        protected virtual extern Haxe.root.Map<Haxe.HaxeString, Haxe.HaxeString> AttributeMap { get; set; }
        [Name("get_nodeName")]
        protected virtual extern Haxe.HaxeString Get_nodeName();
        [Name("set_nodeName")]
        protected virtual extern Haxe.HaxeString Set_nodeName(string v);
        [Name("get_nodeValue")]
        protected virtual extern Haxe.HaxeString Get_nodeValue();
        [Name("set_nodeValue")]
        protected virtual extern Haxe.HaxeString Set_nodeValue(string v);
        [Name("get")]
        public virtual extern Haxe.HaxeString Get(string att);
        [Name("set")]
        public virtual extern void Set(string att, string value);
        [Name("remove")]
        public virtual extern void Remove(string att);
        [Name("exists")]
        public virtual extern Haxe.HaxeBool Exists(string att);
        [Name("attributes")]
        public virtual extern Haxe.root.Iterator<Haxe.HaxeString> Attributes();
        [Name("iterator")]
        public virtual extern Haxe.root.Iterator<Haxe.root.Xml> Iterator();
        [Name("elements")]
        public virtual extern Haxe.root.Iterator<Haxe.root.Xml> Elements();
        [Name("elementsNamed")]
        public virtual extern Haxe.root.Iterator<Haxe.root.Xml> ElementsNamed(string name);
        [Name("firstChild")]
        public virtual extern Haxe.root.Xml FirstChild();
        [Name("firstElement")]
        public virtual extern Haxe.root.Xml FirstElement();
        [Name("addChild")]
        public virtual extern void AddChild(Haxe.root.Xml x);
        [Name("removeChild")]
        public virtual extern Haxe.HaxeBool RemoveChild(Haxe.root.Xml x);
        [Name("insertChild")]
        public virtual extern void InsertChild(Haxe.root.Xml x, int pos);
        [Name("toString")]
        public virtual extern Haxe.HaxeString ToString();
        [Name("ensureElementType")]
        protected virtual extern void EnsureElementType();
        [Name("new")]
        protected virtual extern void New(Haxe.root.XmlType nodeType);
        [Name("Element")]
        public static extern Haxe.root.XmlType Element { get; private set; }
        [Name("PCData")]
        public static extern Haxe.root.XmlType PCData { get; private set; }
        [Name("CData")]
        public static extern Haxe.root.XmlType CData { get; private set; }
        [Name("Comment")]
        public static extern Haxe.root.XmlType Comment { get; private set; }
        [Name("DocType")]
        public static extern Haxe.root.XmlType DocType { get; private set; }
        [Name("ProcessingInstruction")]
        public static extern Haxe.root.XmlType ProcessingInstruction { get; private set; }
        [Name("Document")]
        public static extern Haxe.root.XmlType Document { get; private set; }
        [Name("parse")]
        public static extern Haxe.root.Xml Parse(string str);
        [Name("createElement")]
        public static extern Haxe.root.Xml CreateElement(string name);
        [Name("createPCData")]
        public static extern Haxe.root.Xml CreatePCData(string data);
        [Name("createCData")]
        public static extern Haxe.root.Xml CreateCData(string data);
        [Name("createComment")]
        public static extern Haxe.root.Xml CreateComment(string data);
        [Name("createDocType")]
        public static extern Haxe.root.Xml CreateDocType(string data);
        [Name("createProcessingInstruction")]
        public static extern Haxe.root.Xml CreateProcessingInstruction(string data);
        [Name("createDocument")]
        public static extern Haxe.root.Xml CreateDocument();
    }
}
