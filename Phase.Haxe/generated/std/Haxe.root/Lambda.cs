//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a the Phase Extern Generator
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Phase;
using Phase.Attributes;
namespace Haxe.root
{
    [External]
    [Name("Lambda")]
    public partial class Lambda
    {
        [Name("array")]
        public static extern Haxe.HaxeArray<A> Array<A>(Haxe.root.Iterable<A> it);
        [Name("list")]
        public static extern Haxe.root.List<A> @List<A>(Haxe.root.Iterable<A> it);
        [Name("map")]
        public static extern Haxe.root.List<B> Map<A, B>(Haxe.root.Iterable<A> it, Func<A, B> f);
        [Name("mapi")]
        public static extern Haxe.root.List<B> Mapi<A, B>(Haxe.root.Iterable<A> it, Func<int, A, B> f);
        [Name("flatten")]
        public static extern Haxe.root.List<A> Flatten<A>(Haxe.root.Iterable<Haxe.root.Iterable<A>> it);
        [Name("flatMap")]
        public static extern Haxe.root.List<B> FlatMap<A, B>(Haxe.root.Iterable<A> it, Func<A, Haxe.root.Iterable<B>> f);
        [Name("has")]
        public static extern Haxe.HaxeBool Has<A>(Haxe.root.Iterable<A> it, A elt);
        [Name("exists")]
        public static extern Haxe.HaxeBool Exists<A>(Haxe.root.Iterable<A> it, Func<A, bool> f);
        [Name("foreach")]
        public static extern Haxe.HaxeBool Foreach<A>(Haxe.root.Iterable<A> it, Func<A, bool> f);
        [Name("iter")]
        public static extern void Iter<A>(Haxe.root.Iterable<A> it, Action<A> f);
        [Name("filter")]
        public static extern Haxe.root.List<A> Filter<A>(Haxe.root.Iterable<A> it, Func<A, bool> f);
        [Name("fold")]
        public static extern B Fold<A, B>(Haxe.root.Iterable<A> it, Func<A, B, B> f, B first);
        [Name("count")]
        public static extern Haxe.HaxeInt Count<A>(Haxe.root.Iterable<A> it, Func<A, bool> pred = default(Func<A, bool>));
        [Name("empty")]
        public static extern Haxe.HaxeBool Empty<T>(Haxe.root.Iterable<T> it);
        [Name("indexOf")]
        public static extern Haxe.HaxeInt IndexOf<T>(Haxe.root.Iterable<T> it, T v);
        [Name("find")]
        public static extern Haxe.root.Null<T> Find<T>(Haxe.root.Iterable<T> it, Func<T, bool> f);
        [Name("concat")]
        public static extern Haxe.root.List<T> Concat<T>(Haxe.root.Iterable<T> a, Haxe.root.Iterable<T> b);
    }
}
