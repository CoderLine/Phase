//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a the Phase Extern Generator
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Phase;
using Phase.Attributes;
namespace Haxe.root
{
    [External]
    [Name("Type")]
    public partial class Type
    {
        [Name("getClass")]
        public static extern Haxe.root.Class<T> GetClass<T>(T o);
        [Name("getEnum")]
        public static extern Haxe.root.Enum<dynamic> GetEnum(Haxe.root.EnumValue o);
        [Name("getSuperClass")]
        public static extern Haxe.root.Class<dynamic> GetSuperClass(Haxe.root.Class<object> c);
        [Name("getClassName")]
        public static extern Haxe.HaxeString GetClassName(Haxe.root.Class<object> c);
        [Name("getEnumName")]
        public static extern Haxe.HaxeString GetEnumName(Haxe.root.Enum<object> e);
        [Name("resolveClass")]
        public static extern Haxe.root.Class<dynamic> ResolveClass(string name);
        [Name("resolveEnum")]
        public static extern Haxe.root.Enum<dynamic> ResolveEnum(string name);
        [Name("createInstance")]
        public static extern T CreateInstance<T>(Haxe.root.Class<T> cl, Haxe.HaxeArray<object> args);
        [Name("createEmptyInstance")]
        public static extern T CreateEmptyInstance<T>(Haxe.root.Class<T> cl);
        [Name("createEnum")]
        public static extern T CreateEnum<T>(Haxe.root.Enum<T> e, string constr, Haxe.HaxeArray<object> @params = default(Haxe.HaxeArray<object>));
        [Name("createEnumIndex")]
        public static extern T CreateEnumIndex<T>(Haxe.root.Enum<T> e, int index, Haxe.HaxeArray<object> @params = default(Haxe.HaxeArray<object>));
        [Name("getInstanceFields")]
        public static extern Haxe.HaxeArray<Haxe.HaxeString> GetInstanceFields(Haxe.root.Class<object> c);
        [Name("getClassFields")]
        public static extern Haxe.HaxeArray<Haxe.HaxeString> GetClassFields(Haxe.root.Class<object> c);
        [Name("getEnumConstructs")]
        public static extern Haxe.HaxeArray<Haxe.HaxeString> GetEnumConstructs(Haxe.root.Enum<object> e);
        [Name("typeof")]
        public static extern Haxe.root.ValueType Typeof(object v);
        [Name("enumEq")]
        public static extern Haxe.HaxeBool EnumEq<T>(T a, T b);
        [Name("enumConstructor")]
        public static extern Haxe.HaxeString EnumConstructor(Haxe.root.EnumValue e);
        [Name("enumParameters")]
        public static extern Haxe.HaxeArray<dynamic> EnumParameters(Haxe.root.EnumValue e);
        [Name("enumIndex")]
        public static extern Haxe.HaxeInt EnumIndex(Haxe.root.EnumValue e);
        [Name("allEnums")]
        public static extern Haxe.HaxeArray<T> AllEnums<T>(Haxe.root.Enum<T> e);
    }
}
