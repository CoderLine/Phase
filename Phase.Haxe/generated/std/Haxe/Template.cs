//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a the Phase Extern Generator
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Phase;
using Phase.Attributes;
namespace Haxe
{
    [External]
    [Name("haxe.Template")]
    public partial class Template
    {
        [Name("expr")]
        protected virtual extern TemplateExpr Expr { get; set; }
        [Name("context")]
        protected virtual extern dynamic Context { get; set; }
        [Name("macros")]
        protected virtual extern dynamic Macros { get; set; }
        [Name("stack")]
        protected virtual extern Haxe.root.List<dynamic> @Stack { get; set; }
        [Name("buf")]
        protected virtual extern Haxe.root.StringBuf Buf { get; set; }
        [Name("execute")]
        public virtual extern Haxe.HaxeString Execute(object context, object macros = default(object));
        [Name("resolve")]
        protected virtual extern dynamic Resolve(string v);
        [Name("parseTokens")]
        protected virtual extern Haxe.root.List<Token> ParseTokens(string data);
        [Name("parseBlock")]
        protected virtual extern TemplateExpr ParseBlock(Haxe.root.List<Token> tokens);
        [Name("parse")]
        protected virtual extern TemplateExpr Parse(Haxe.root.List<Token> tokens);
        [Name("parseExpr")]
        protected virtual extern Action<> ParseExpr(string data);
        [Name("makeConst")]
        protected virtual extern Func<dynamic> MakeConst(string v);
        [Name("makePath")]
        protected virtual extern Func<dynamic> MakePath(Func<object> e, Haxe.root.List<ExprToken> l);
        [Name("makeExpr")]
        protected virtual extern Func<dynamic> MakeExpr(Haxe.root.List<ExprToken> l);
        [Name("makeExpr2")]
        protected virtual extern Func<dynamic> MakeExpr2(Haxe.root.List<ExprToken> l);
        [Name("run")]
        protected virtual extern void Run(TemplateExpr e);
        [Name("new")]
        public virtual extern void New(string str);
        [Name("splitter")]
        private static extern Haxe.root.EReg Splitter { get; set; }
        [Name("expr_splitter")]
        private static extern Haxe.root.EReg Expr_splitter { get; set; }
        [Name("expr_trim")]
        private static extern Haxe.root.EReg Expr_trim { get; set; }
        [Name("expr_int")]
        private static extern Haxe.root.EReg Expr_int { get; set; }
        [Name("expr_float")]
        private static extern Haxe.root.EReg Expr_float { get; set; }
        [Name("globals")]
        public static extern dynamic Globals { get; set; }
    }
}
