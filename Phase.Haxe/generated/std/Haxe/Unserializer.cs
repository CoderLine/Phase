//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a the Phase Extern Generator
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Phase;
using Phase.Attributes;
namespace Haxe
{
    [External]
    [Name("haxe.Unserializer")]
    public partial class Unserializer
    {
        [Name("buf")]
        protected virtual extern Haxe.HaxeString Buf { get; set; }
        [Name("pos")]
        protected virtual extern Haxe.HaxeInt Pos { get; set; }
        [Name("length")]
        protected virtual extern Haxe.HaxeInt Length { get; set; }
        [Name("cache")]
        protected virtual extern Haxe.HaxeArray<dynamic> Cache { get; set; }
        [Name("scache")]
        protected virtual extern Haxe.HaxeArray<Haxe.HaxeString> Scache { get; set; }
        [Name("resolver")]
        protected virtual extern Haxe.TypeResolver Resolver { get; set; }
        [Name("setResolver")]
        public virtual extern void SetResolver(Haxe.TypeResolver r);
        [Name("getResolver")]
        public virtual extern Haxe.TypeResolver GetResolver();
        [Name("get")]
        protected virtual extern Haxe.HaxeInt Get(int p);
        [Name("readDigits")]
        protected virtual extern Haxe.HaxeInt ReadDigits();
        [Name("readFloat")]
        protected virtual extern Haxe.HaxeFloat ReadFloat();
        [Name("unserializeObject")]
        protected virtual extern void UnserializeObject(dynamic o);
        [Name("unserializeEnum")]
        protected virtual extern object UnserializeEnum(Haxe.root.Enum<object> edecl, string tag);
        [Name("unserialize")]
        public virtual extern dynamic Unserialize();
        [Name("new")]
        public virtual extern void New(string buf);
        [Name("DEFAULT_RESOLVER")]
        public static extern Haxe.TypeResolver DEFAULT_RESOLVER { get; set; }
        [Name("BASE64")]
        private static extern Haxe.HaxeString BASE64 { get; set; }
        [Name("CODES")]
        private static extern Haxe.HaxeArray<Haxe.HaxeInt> CODES { get; set; }
        [Name("initCodes")]
        private static extern Haxe.HaxeArray<Haxe.HaxeInt> InitCodes();
        [Name("run")]
        public static extern dynamic Run(string v);
    }
}
