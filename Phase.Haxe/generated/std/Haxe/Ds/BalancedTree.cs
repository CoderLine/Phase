//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a the Phase Extern Generator
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Phase;
using Phase.Attributes;
namespace Haxe.Ds
{
    [External]
    [Name("haxe.ds.BalancedTree")]
    public partial class BalancedTree<K, V>
    {
        [Name("root")]
        protected virtual extern Haxe.Ds.TreeNode<K, V> Root { get; set; }
        [Name("set")]
        public virtual extern void Set(K key, V value);
        [Name("get")]
        public virtual extern Haxe.root.Null<V> Get(K key);
        [Name("remove")]
        public virtual extern Haxe.HaxeBool Remove(K key);
        [Name("exists")]
        public virtual extern Haxe.HaxeBool Exists(K key);
        [Name("iterator")]
        public virtual extern Haxe.root.Iterator<V> Iterator();
        [Name("keys")]
        public virtual extern Haxe.root.Iterator<K> Keys();
        [Name("setLoop")]
        protected virtual extern Haxe.Ds.TreeNode<K, V> SetLoop(K k, V v, Haxe.Ds.TreeNode<K, V> node);
        [Name("removeLoop")]
        protected virtual extern Haxe.Ds.TreeNode<K, V> RemoveLoop(K k, Haxe.Ds.TreeNode<K, V> node);
        [Name("iteratorLoop")]
        protected virtual extern void IteratorLoop(Haxe.Ds.TreeNode<K, V> node, Haxe.HaxeArray<V> acc);
        [Name("keysLoop")]
        protected virtual extern void KeysLoop(Haxe.Ds.TreeNode<K, V> node, Haxe.HaxeArray<K> acc);
        [Name("merge")]
        protected virtual extern Haxe.Ds.TreeNode<K, V> Merge(Haxe.Ds.TreeNode<K, V> t1, Haxe.Ds.TreeNode<K, V> t2);
        [Name("minBinding")]
        protected virtual extern Haxe.Ds.TreeNode<K, V> MinBinding(Haxe.Ds.TreeNode<K, V> t);
        [Name("removeMinBinding")]
        protected virtual extern Haxe.Ds.TreeNode<K, V> RemoveMinBinding(Haxe.Ds.TreeNode<K, V> t);
        [Name("balance")]
        protected virtual extern Haxe.Ds.TreeNode<K, V> Balance(Haxe.Ds.TreeNode<K, V> l, K k, V v, Haxe.Ds.TreeNode<K, V> r);
        [Name("compare")]
        protected virtual extern Haxe.HaxeInt Compare(K k1, K k2);
        [Name("toString")]
        public virtual extern Haxe.HaxeString ToString();
        [Name("new")]
        public virtual extern void New();
    }
}
