//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a the Phase Extern Generator
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Phase;
using Phase.Attributes;
namespace Haxe.Io
{
    [External]
    [Name("haxe.io.Path")]
    public partial class Path
    {
        [Name("dir")]
        public virtual extern Haxe.HaxeString Dir { get; set; }
        [Name("file")]
        public virtual extern Haxe.HaxeString File { get; set; }
        [Name("ext")]
        public virtual extern Haxe.HaxeString Ext { get; set; }
        [Name("backslash")]
        public virtual extern Haxe.HaxeBool Backslash { get; set; }
        [Name("toString")]
        public virtual extern Haxe.HaxeString ToString();
        [Name("new")]
        public virtual extern void New(string path);
        [Name("withoutExtension")]
        public static extern Haxe.HaxeString WithoutExtension(string path);
        [Name("withoutDirectory")]
        public static extern Haxe.HaxeString WithoutDirectory(string path);
        [Name("directory")]
        public static extern Haxe.HaxeString Directory(string path);
        [Name("extension")]
        public static extern Haxe.HaxeString Extension(string path);
        [Name("withExtension")]
        public static extern Haxe.HaxeString WithExtension(string path, string ext);
        [Name("join")]
        public static extern Haxe.HaxeString Join(Haxe.HaxeArray<string> paths);
        [Name("normalize")]
        public static extern Haxe.HaxeString Normalize(string path);
        [Name("addTrailingSlash")]
        public static extern Haxe.HaxeString AddTrailingSlash(string path);
        [Name("removeTrailingSlashes")]
        public static extern Haxe.HaxeString RemoveTrailingSlashes(string path);
        [Name("isAbsolute")]
        public static extern Haxe.HaxeBool IsAbsolute(string path);
        [Name("unescape")]
        private static extern Haxe.HaxeString Unescape(string path);
        [Name("escape")]
        private static extern Haxe.HaxeString Escape(string path, bool allowSlashes = false);
    }
}
