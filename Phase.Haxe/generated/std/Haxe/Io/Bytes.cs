//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a the Phase Extern Generator
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Phase;
using Phase.Attributes;
namespace Haxe.Io
{
    [External]
    [Name("haxe.io.Bytes")]
    public partial class Bytes
    {
        [Name("length")]
        public virtual extern Haxe.HaxeInt Length { get; private set; }
        [Name("b")]
        protected virtual extern Js.Html.Uint8Array B { get; set; }
        [Name("data")]
        protected virtual extern Js.Html.DataView Data { get; set; }
        [Name("get")]
        public virtual extern Haxe.HaxeInt Get(int pos);
        [Name("set")]
        public virtual extern void Set(int pos, int v);
        [Name("blit")]
        public virtual extern void Blit(int pos, Bytes src, int srcpos, int len);
        [Name("fill")]
        public virtual extern void Fill(int pos, int len, int value);
        [Name("sub")]
        public virtual extern Bytes Sub(int pos, int len);
        [Name("compare")]
        public virtual extern Haxe.HaxeInt Compare(Bytes other);
        [Name("initData")]
        protected virtual extern void InitData();
        [Name("getDouble")]
        public virtual extern Haxe.HaxeFloat GetDouble(int pos);
        [Name("getFloat")]
        public virtual extern Haxe.HaxeFloat GetFloat(int pos);
        [Name("setDouble")]
        public virtual extern void SetDouble(int pos, double v);
        [Name("setFloat")]
        public virtual extern void SetFloat(int pos, double v);
        [Name("getUInt16")]
        public virtual extern Haxe.HaxeInt GetUInt16(int pos);
        [Name("setUInt16")]
        public virtual extern void SetUInt16(int pos, int v);
        [Name("getInt32")]
        public virtual extern Haxe.HaxeInt GetInt32(int pos);
        [Name("setInt32")]
        public virtual extern void SetInt32(int pos, int v);
        [Name("getInt64")]
        public virtual extern Haxe.Int64 GetInt64(int pos);
        [Name("setInt64")]
        public virtual extern void SetInt64(int pos, Haxe.Int64 v);
        [Name("getString")]
        public virtual extern Haxe.HaxeString GetString(int pos, int len);
        [Name("readString")]
        public virtual extern Haxe.HaxeString ReadString(int pos, int len);
        [Name("toString")]
        public virtual extern Haxe.HaxeString ToString();
        [Name("toHex")]
        public virtual extern Haxe.HaxeString ToHex();
        [Name("getData")]
        public virtual extern Haxe.Io.BytesData GetData();
        [Name("new")]
        protected virtual extern void New(Haxe.Io.BytesData data);
        [Name("alloc")]
        public static extern Bytes Alloc(int length);
        [Name("ofString")]
        public static extern Bytes OfString(string s);
        [Name("ofData")]
        public static extern Bytes OfData(Haxe.Io.BytesData b);
        [Name("fastGet")]
        public static extern Haxe.HaxeInt FastGet(Haxe.Io.BytesData b, int pos);
    }
}
