//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a the Phase Extern Generator
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Phase;
using Phase.Attributes;
namespace Haxe.Remoting
{
    [External]
    [Name("haxe.remoting.SocketProtocol")]
    public partial class SocketProtocol
    {
        [Name("socket")]
        public virtual extern Haxe.Remoting.Socket Socket { get; set; }
        [Name("context")]
        public virtual extern Haxe.Remoting.Context Context { get; set; }
        [Name("decodeChar")]
        protected virtual extern Haxe.root.Null<Haxe.HaxeInt> DecodeChar(int c);
        [Name("encodeChar")]
        protected virtual extern Haxe.root.Null<Haxe.HaxeInt> EncodeChar(int c);
        [Name("messageLength")]
        public virtual extern Haxe.root.Null<Haxe.HaxeInt> MessageLength(int c1, int c2);
        [Name("encodeMessageLength")]
        public virtual extern dynamic EncodeMessageLength(int len);
        [Name("sendRequest")]
        public virtual extern void SendRequest(Haxe.HaxeArray<string> path, Haxe.HaxeArray<object> @params);
        [Name("sendAnswer")]
        public virtual extern void SendAnswer(object answer, bool isException = default(bool));
        [Name("sendMessage")]
        public virtual extern void SendMessage(string msg);
        [Name("decodeData")]
        public virtual extern Haxe.HaxeString DecodeData(string data);
        [Name("isRequest")]
        public virtual extern Haxe.HaxeBool IsRequest(string data);
        [Name("processRequest")]
        public virtual extern void ProcessRequest(string data, Action<Haxe.HaxeArray<string>, Haxe.HaxeArray<object>, object> onError = default(Action<Haxe.HaxeArray<string>, Haxe.HaxeArray<object>, object>));
        [Name("processAnswer")]
        public virtual extern dynamic ProcessAnswer(string data);
        [Name("new")]
        public virtual extern void New(Haxe.Remoting.Socket sock, Haxe.Remoting.Context ctx);
    }
}
