//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a the Phase Extern Generator
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Phase;
using Phase.Attributes;
namespace Haxe.Macro
{
    [External]
    [Name("haxe.macro.Printer")]
    public partial class Printer
    {
        [Name("tabs")]
        protected virtual extern Haxe.HaxeString Tabs { get; set; }
        [Name("tabString")]
        protected virtual extern Haxe.HaxeString TabString { get; set; }
        [Name("printUnop")]
        public virtual extern Haxe.HaxeString PrintUnop(Haxe.Macro.Unop op);
        [Name("printBinop")]
        public virtual extern Haxe.HaxeString PrintBinop(Haxe.Macro.Binop op);
        [Name("escapeString")]
        protected virtual extern Haxe.HaxeString EscapeString(string s, string delim);
        [Name("printFormatString")]
        public virtual extern Haxe.HaxeString PrintFormatString(string s);
        [Name("printString")]
        public virtual extern Haxe.HaxeString PrintString(string s);
        [Name("printConstant")]
        public virtual extern Haxe.HaxeString PrintConstant(Haxe.Macro.Constant c);
        [Name("printTypeParam")]
        public virtual extern Haxe.HaxeString PrintTypeParam(Haxe.Macro.TypeParam param);
        [Name("printTypePath")]
        public virtual extern Haxe.HaxeString PrintTypePath(Haxe.Macro.TypePath tp);
        [Name("printComplexType")]
        public virtual extern Haxe.HaxeString PrintComplexType(Haxe.Macro.ComplexType ct);
        [Name("printMetadata")]
        public virtual extern Haxe.HaxeString PrintMetadata(Haxe.Macro.MetadataEntry meta);
        [Name("printAccess")]
        public virtual extern Haxe.HaxeString PrintAccess(Haxe.Macro.Access access);
        [Name("printField")]
        public virtual extern Haxe.HaxeString PrintField(Haxe.Macro.Field field);
        [Name("printTypeParamDecl")]
        public virtual extern Haxe.HaxeString PrintTypeParamDecl(Haxe.Macro.TypeParamDecl tpd);
        [Name("printFunctionArg")]
        public virtual extern Haxe.HaxeString PrintFunctionArg(Haxe.Macro.FunctionArg arg);
        [Name("printFunction")]
        public virtual extern Haxe.HaxeString PrintFunction(Haxe.Macro.Function func);
        [Name("printVar")]
        public virtual extern Haxe.HaxeString PrintVar(Haxe.Macro.Var v);
        [Name("printExpr")]
        public virtual extern Haxe.HaxeString PrintExpr(Haxe.Macro.Expr e);
        [Name("printExprs")]
        public virtual extern Haxe.HaxeString PrintExprs(Haxe.HaxeArray<Haxe.Macro.Expr> el, string sep);
        [Name("printExtension")]
        protected virtual extern Haxe.HaxeString PrintExtension(Haxe.HaxeArray<Haxe.Macro.TypePath> tpl, Haxe.HaxeArray<Haxe.Macro.Field> fields);
        [Name("printStructure")]
        protected virtual extern Haxe.HaxeString PrintStructure(Haxe.HaxeArray<Haxe.Macro.Field> fields);
        [Name("printTypeDefinition")]
        public virtual extern Haxe.HaxeString PrintTypeDefinition(Haxe.Macro.TypeDefinition t, bool printPackage = true);
        [Name("printFieldWithDelimiter")]
        protected virtual extern Haxe.HaxeString PrintFieldWithDelimiter(Haxe.Macro.Field f);
        [Name("opt")]
        protected virtual extern Haxe.HaxeString Opt<T>(T v, Func<T, string> f, string prefix = "");
        [Name("new")]
        public virtual extern void New(string tabString = "\t");
    }
}
