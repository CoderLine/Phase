//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a the Phase Extern Generator
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Phase;
using Phase.Attributes;
namespace Haxe
{
    [External]
    [Name("haxe.Http")]
    public partial class Http
    {
        [Name("url")]
        public virtual extern Haxe.HaxeString Url { get; set; }
        [Name("responseData")]
        public virtual extern Haxe.root.Null<Haxe.HaxeString> ResponseData { get; private set; }
        [Name("async")]
        public virtual extern Haxe.HaxeBool Async { get; set; }
        [Name("withCredentials")]
        public virtual extern Haxe.HaxeBool WithCredentials { get; set; }
        [Name("postData")]
        protected virtual extern Haxe.HaxeString PostData { get; set; }
        [Name("headers")]
        protected virtual extern Haxe.root.List<dynamic> Headers { get; set; }
        [Name("params")]
        protected virtual extern Haxe.root.List<dynamic> Params { get; set; }
        [Name("setHeader")]
        public virtual extern Http SetHeader(string header, string value);
        [Name("addHeader")]
        public virtual extern Http AddHeader(string header, string value);
        [Name("setParameter")]
        public virtual extern Http SetParameter(string param, string value);
        [Name("addParameter")]
        public virtual extern Http AddParameter(string param, string value);
        [Name("setPostData")]
        public virtual extern Http SetPostData(string data);
        [Name("req")]
        protected virtual extern Js.Html.XMLHttpRequest Req { get; set; }
        [Name("cancel")]
        public virtual extern void Cancel();
        [Name("request")]
        public virtual extern void Request(bool post = default(bool));
        [Name("onData")]
        public virtual extern void OnData(string data);
        [Name("onError")]
        public virtual extern void OnError(string msg);
        [Name("onStatus")]
        public virtual extern void OnStatus(int status);
        [Name("new")]
        public virtual extern void New(string url);
        [Name("requestUrl")]
        public static extern Haxe.HaxeString RequestUrl(string url);
    }
}
